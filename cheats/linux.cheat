% linux

# create a user
sudo useradd -s /bin/bash -d /home/<username>/ -m -G sudo <username> && sudo passwd <username>

# add user to a group:
sudo usermod -aG <groups> <username>

# list current user groups:
id -nG

# get user id
id -u

# get user group id
id -g

# figlet
echo "$(hostname)" | figlet -cptk

# figlet - list fonts
curl -s http://www.figlet.org/examples.html | grep 'Font:' | sed 's/Font: //g'

# toilet (alternative to figlet)
# p>
toilet -f mono12 -F metal "<text>"

# do not show blank lines on output
grep '\S'

# tee: redirect command output (stdout and stderr) to file or another command. Better than '>' or '>>'
<command> |& tee -a <file-or-command>

# run indefinitely/infinitely in a loop
while :; do sleep 59; echo -n ' ' >&2; done &

# base64 encode
echo -n "<text>" | base64 -w 0

# base64 decode
echo -n "<encoded-text>" | base64 -d -w 0

# list active kernel modules and their description
lsmod | perl -nE 'BEGIN{ <> }; ($m) = /(\S+)/; printf "%-20s: %s\n", $m, qx/modinfo $m/ =~ /description:\s*(.*)/' | sort

# ttyclock
tty-clock -b -c -s -f '%A, %d %B %Y'

# grep by regex. E.g. regex to get ip addresses: ([0-9]{1,3}[\.]){3}[0-9]{1,3}
grep -E -o '<regex>'

# create a large file . E.g. for 1 GB: 1024000
dd if=/dev/zero of=<path-to-file> bs=1024 count=<size-in-bytes>

# flash iso image file into physical device
sudo dd bs=4M if=<input-iso-file-path> of=<output-device> status=progress oflag=sync

# interactively sudo kill a process
sudo ps aux | fzf | awk '{print $2}' | xargs sudo kill -9

# restart clippy
kill -9 $(pgrep python3 | grep clippy | awk '{print $1}') && /storage/src/devops/bin/clippy.py && tail -f /tmp/clippy.log

# df without snaps, run dir and docker
sudo df -h | grep -v snap | grep -v run | grep -v docker

# show process tree (ps)
ps -aux --forest

# prettify json
<command-that-outputs-json> | python3 -m json.tool | pygmentize -l json

# speedtest json
speedtest-cli --json | python3 -m json.tool | pygmentize -l json

# speedtest simple
echo "$(date '+%Y-%m-%d %H:%M:%S') $(whoami)@$(hostname) $(speedtest-cli --simple --single | sed s/://g | tr '\n' ' ')" >> ~/speedtest-history.txt && cat ~/speedtest-history.txt

# show files opened by a process (lsof)
sudo lsof -p $(ps aux | fzf | awk '{print $2}')

# set/change locale
echo 'Enable at least en_US.UTF-8 and pt_BR.UTF-8, so that mosh can work.' && sleep 5 && sudo dpkg-reconfigure locales &&  echo 'Now restart the system or open a new terminal.'

# backup a device to a gzipped dd image:
time sudo dd bs=4M if=<device-to-backup> | gzip > <gzipped-image-file>

# restore a device from a gzipped dd image:
time gunzip --stdout <gzipped-image-file> | sudo dd bs=4M of=<device-to-restore>

# restore a device from a xz dd image
xzcat <xz-image-file-path> | dd bs=4M of=/dev/<device-name> iflag=fullblock oflag=direct status=progress

# update fonts cache
fc-cache -f -v

# list fonts
fc-list

# show process tree
pstree -a -g

# find files created/modified on the last x minutes
find <path> -mmin -<minutes> -type f -exec ls -lha {} +

# find files created/modified on the last x days with a given extension (e.g. number-of-days=7, file-extension=md)
find . -type f -ctime -<number-of-days> -name '*.<file-extension>'

# get formatted date
date +%Y%m%d-%H%M%S-%N

# get formatted date with weekday and month
date '+%A %d, %B %Y'

# get information on ssh key
ssh-keygen -lf <ssh-key-file>

# generate more secure ssh key pair (state of the art cryptography as of 2021, as mentioned at https://linuxnatives.net/2019/how-to-create-good-ssh-keys)
ssh-keygen -t ed25519

# get file/directory octal/numeric permissions
stat -c '%A %a %n' <file-or-folder-path>

# echo file/directory available numeric permissions
echo -e "\nNUMERIC PERMISSIONS: \n\n0=No Permission \n1=Execute \n2=Write \n4=Read\n"

# single character substitution on input
tr '<original_character>' '<new_character>'

# delete character from input
tr -d '<character>'

# columnate command stdout
'<command>' | column -t

# interactive cd into directory
cd $(tree -dfl -p | fzf | awk '{print $NF}')

# Show directory tree, with just directories and in n recursion-levels
tree -L <number-of-recursion-levels> -n <directory-path> -i -d -l -f

# list x biggest files on a directory
du -h | grep -v -e '\.$' | sort -hr | head -n <number-of-files>

# echoes all pressed keys on screen
screenkey &

# redirect command stdout and stderr to file
<command> >> <log-file> 2>&1

# fzf file selection
find <directory> -type f | fzf

# show directories/subdirectories inside a directory (only their names)
find <path>/ -maxdepth 1 ! -path <path>/ -type d | tr '/' ' ' | awk '{print $NF}'

# top processes by memory consumption (ps)
watch -n1 -e 'ps -axo rss,vsz,cmd --sort=-rss | head -6'

# processes that has a file/directory open (lsof)
lsof +f -- <file-or-directory>

# list available shells
sudo cat /etc/shells

# change current user shell
chsh -s <shell-path>

# cut from a given column number to the end
echo <text> | cut -f <column-number>- -d ' '

# ssh into host pre-configured on ~/.ssh/config
ssh $(cat ~/.ssh/config | grep 'Host ' | cut -d ' ' -f 2 | fzf)

# mosh into host pre-configured on ~/.ssh/config
mosh $(cat ~/.ssh/config | grep 'Host ' | cut -d ' ' -f 2 | fzf)

# stopwatch timer (time e.g. 10m, 30s, 1h 5m 30s, 2020-01-01 14:00 UTC, etc...)
termdown -B --font $(curl -s http://www.figlet.org/examples.html | grep 'Font:' | sed 's/Font: //g' | fzf --prompt 'choose a font for presenting the timer: ') -b -q 5 -t 'TIME IS UP!' <time>

# get words count
wc -w <file>

# get characters count
wc -m <file>

# ls - show most recent files, from older to newer
ls -lArt <directory> | tail -n <number-of-recent-files>

# run make command, supressing "Entering Directory" messages
make -s <subcommand>

# show cowsay available "animals"
cowsay -l

# custom cowsay
cowsay -b -f <animal> -W <number-of-columns> "<sentence>"

# simple tux cowsay
cowsay -b -f tux -W 80 "<sentence>"

# demo all available cowsay animals
for animal in $(cowsay -l | tail +2); do cowsay -b -f $animal "I am $animal, nice to meet you"; done

# format of a cowsay "character" file
xdg-open https://github.com/bkendzior/cowfiles/tree/master/cowfiles

# clear caches -- clear RAM and SWAP caches.
sudo -- bash -c "echo -e '\nMEMORY STATS BEFORE:' && free -h && sync && echo $(echo -e '1 pagecache (this is safer on production machines)\n2 dentries_and_inodes\n3 pagecache+dentries_and_inodes' | fzf | awk '{print $1}') >'/proc/sys/vm/drop_caches' && swapoff -a && swapon -a && echo -e '\n\nRAM cache and swap cleared.\n' && echo -e '\nMEMORY STATS NOW:' && free -h"

# Generate public key from private key
ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub

# change user's shell - at "/etc/shells" are the valid login shells
chsh -s <shell-path> <user>

# run program with modified priority: -20 (most favorable) to +19: the higher the number, the lowest the priority
nice -10 <program-path>

# delete environment variable
unset <VAR_NAME>

# show all function names (on the current shell)
declare -F

# show all users
compgen -u

# show all groups
compgen -g

# show reboot history
last reboot

# output list of files on current directory to file
ls -lha --color=never | awk '{print $NF}' > <filename>

# random string (e.g. to generate passwords)
tr -dc "a-zA-Z0-9_#@.-" < /dev/urandom | head -c <number-of-characters> | xclip -selection clipboard

# run multiple commands as sudo with pipes, redirects, etc
sudo -- bash -c "<command>"

# search on files for regex or string and move them to another directory with xargs
grep -rn '<regex-or-string>' | cut -d ':' -f 1 | uniq | sort | xargs -I % mv % <destination-folder>

# List all graphical application (.desktop files)
find ~/.local/share/flatpak/exports/share/applications ~/.local/share/applications /usr/share/applications -name "*.desktop

# Select a graphical application .desktop file path:
find ~/.local/share/flatpak/exports/share/applications ~/.local/share/applications /usr/share/applications -name "*.desktop" | fzf -e --prompt "Select a program name: "

# Open a graphical application .desktop file with nvim:
xdotool type "nvim $(find ~/.local/share/flatpak/exports/share/applications ~/.local/share/applications /usr/share/applications -name '*.desktop' | fzf -e --prompt 'Select a program name: ')"

# python expression calculator - use for mathematical calculations
python3 -c "print(str(<expression>))"
