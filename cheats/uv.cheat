% uv, python

# Install uv using curl
curl -LsSf https://astral.sh/uv/install.sh | sh

# Update uv to latest version (if installed via standalone installer)
uv self update

# Initialize a new project
uv init <project_name>

$ project_name: echo "my_project"

# Add a package to project
uv add <package_name>

$ package_name: echo "requests"

# Add a package with specific version to project
uv add <package_name>@<version>

$ version: echo "latest"

# Add dependency to a script
uv add --script <script_path> <package_name>

$ script_path: ls *.py

# Run a Python script with dependencies
uv run <script_path>

# Run a command with specific Python version
uv run --python <python_version> -- <command>

$ python_version: echo "3.11"
$ command: echo "python --version"

# Install Python tool (like pipx)
uv tool install <tool_name>

$ tool_name: echo "ruff"

# Run tool in ephemeral environment (uvx - pipx-like)
uvx <tool_name> <args>

# Install specific Python versions
uv python install <versions>

$ versions: echo "3.10 3.11 3.12"

# Pin Python version for current directory
uv python pin <version>

# Create virtual environment
uv venv

# Create virtual environment with specific Python version
uv venv --python <python_version>

# Compile requirements (pip-tools style)
uv pip compile <requirements_in> --output-file <requirements_txt>

$ requirements_in: ls requirements*.in
$ requirements_txt: echo "requirements.txt"

# Install packages from requirements.txt
uv pip sync <requirements_txt>

# Build project for distribution
uv build

# Publish project to PyPI
uv publish

# Show help for any command
uv help <command>

$ command: echo "venv | pip | python | tool | run | add"
