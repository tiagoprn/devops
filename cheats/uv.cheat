% uv, python

# install uv using curl ("standalone installer")
curl -LsSf https://astral.sh/uv/install.sh | sh

# update uv to latest version (if installed via curl)
uv self update

# install specific python versions
uv python install <versions>

$ versions: echo "3.10 3.11 3.12 3.13"

# install specific python version (fzf)
uv python install $(uv python list --all-versions | awk '{print $1}' | fzf --exact)

# list installed python versions
uv python list --only-installed --python-preference only-managed

# list installed python versions (fzf)
uv python list --only-installed --python-preference only-managed | awk '{print $1}' | fzf --exact

# list python versions available for installation
uv python list --all-versions | awk '{print $1}' | fzf --exact

# create virtualenv (on the current folder with the default ".venv" path)
uv venv

# create virtualenv with specific python version and on specific path
uv venv --python <python_version> <path>

# install packages from requirements.txt
uv pip sync <requirements_txt>

# compile requirements (pip-tools style)
uv pip compile <requirements_in> --output-file <requirements_txt>

$ requirements_in: ls requirements*.in
$ requirements_txt: echo "requirements.txt"

# run script with dependencies (you can use "inline script dependencies", as on PEP 723)
uv run <script_path>

# run command with specific python version
uv run --python <python_version> -- <command>

# run command with specific python version and dependencies (package names must be separated by ,)
uv run --python <python_version> --with <package_names> -- <command>

# install python tool (like pipx)
uv tool install <tool_name>

$ tool_name: echo "ruff"

# run tool in ephemeral environment (try out a tool or one-off command once, without installing it)
uvx <tool_name> <args>

# initialize a new project
uv init <project_name>

# add package to project
uv add <package_name>

# add package with specific version to project (you can use "latest" as "version")
uv add <package_name>@<version>

# add dependency to script
uv add --script <script_path> <package_name>

# pin python version for current directory
uv python pin <version>

# build project for distribution
uv build

# publish project to PyPI
uv publish
