% poetry

# manually install poetry (the recommended method)
curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3

# show current configuration (virtualenv path, etc...):
poetry config --list

# list all virtualenvs current available:
ls -lha $HOME/.cache/pypoetry/virtualenvs

# create or enter virtualenv
poetry shell

# delete virtualenv (you can use case you wish to force deactivating a virtualenv)
poetry env remove <python-version>

# show current virtualenv
poetry env list --full-path

# get full path of python on virtualenv (IMPORTANT: both "python" and "python3" will point to the venv)
poetry run which python

# install dependencies
poetry install

# update dependencies
poetry update

# list all packages with their descriptions
poetry show

# show outdated packages
poetry show --outdated

# show each package's dependencies
poetry show -t

# add and install dependency (updates the lock file)
poetry add <pypi-package-name>

# add and install development dependency (updates the lock file)
poetry add -D <pypi-package-name>

# remove dependency (updates the lock file)
poetry remove <pypi-package-name>

# Executes a script defined in the "[tool.poetry.scripts]" section of "pyproject.toml"
poetry run <script-name>

# export requirements.txt file
poetry export -E -o requirements.txt

# export requirements.txt file (without hashes)
poetry export -E --without-hashes -o requirements.txt

# export requirements.txt file (development dependencies)
poetry export -E --dev -o requirements-dev.txt

# builds the source and wheels archives (prepare to publish on the external repository - default: pypi.org)
poetry build

# publishes the output of the build command to the project's external repository (default: pypi.org)
poetry publish

# create new project
poetry new <project-name>

# setup poetry on an existing project
poetry init

