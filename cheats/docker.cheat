% docker

# run container
SHARED_FOLDER=/tmp/shared-docker-$(shell date +%Y%m%d_%H%M%S) && \
echo "You can exchange files with this containers on the directory $(SHARED_FOLDER) on the host and /shared on the container." && \
mkdir -p $(SHARED_FOLDER) && \
@docker run --rm -d --network bridge --mount type=bind,source=$(SHARED_FOLDER),target=/shared <container-name>

# copy container.id to the clipboard
docker ps | fzf | awk '{print $1}' | xclip -i -selection clipboard

# copy image_id to the clipboard
docker images | fzf | awk '{print $3}' | xclip -i -selection clipboard

# kill and remove container
export CONTAINER_ID=$(docker ps | fzf | awk '{print $1}') && docker kill $CONTAINER_ID && docker rm $CONTAINER_ID

# open bash shell inside container
export CONTAINER_ID=$(docker ps | fzf | awk '{print $1}') && docker exec -it $CONTAINER_ID /bin/bash

# delete images
docker rmi $(docker images | fzf | awk '{print $3}') -f

# get container ip address
export CONTAINER_ID=$(docker ps | fzf | awk '{print $1}') && docker inspect $CONTAINER_ID | jq '.[] | {(.Name) : [(.Config.ExposedPorts | keys),(.NetworkSettings.Networks | to_entries | map({(.key): .value.IPAddress}))]}'

# watch container logs
export CONTAINER_ID=$(docker ps | fzf | awk '{print $1}') && docker logs -f $CONTAINER_ID

# containers cleanup (prune)
docker system prune

# Remove docker volume
export VOLUME_ID=$(docker volume ls | fzf | awk '{print $2}') && docker volume rm $VOLUME_ID

# Remove docker network
export NETWORK_ID=$(docker network ls | fzf | awk '{print $2}') && docker network rm $NETWORK_ID

