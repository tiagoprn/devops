% git, gh

# Get current branch
git branch | grep ^* | cut -d ' ' -f 2

# Copy current branch to clipboard
git branch | grep ^* | cut -d ' ' -f 2 | cb

# Get current commit hash
git rev-parse HEAD

# Get git repository root
git rev-parse --show-toplevel

# Go to git repository root
cd $(git rev-parse --show-toplevel)

# Unstage - removes file/directory from the staging area (before commiting)
git reset HEAD <file-or-directory>

# Get git repository remote url
cat $(git rev-parse --show-toplevel)/.git/config | grep url | cut -d "=" -f 2 | tr "\n" " "

# Copy git repository remote url to clipboard
cat $(git rev-parse --show-toplevel)/.git/config | grep url | cut -d "=" -f 2 | tr "\n" " " | cb

# Show all commit hashes with author and date
git log '--pretty=%h by %aN at %aD'

# Get all commit hashes with author and date and output to nvim to inspect
git log '--pretty=%h by %aN at %aD' | nvim -

# Select commit hash with fzf and copy to the clipboard - when browsing through the list shows a preview of which files changed on each commit
git log '--pretty=%aI %h %aN' | fzf --preview "git diff-tree --no-commit-id --name-status {2} -r" | awk '{print $2}' | xclip -i -selection clipboard | notify-send "Commit hash copied to clipboard!"

# List all branches that contain a commit (listed from the oldest to the newest commit date)
git branch --sort=committerdate --contains <commit-hash>

# List all branches that contain a commit (listed from the newest to the oldest commit date)
git branch --sort=-committerdate --contains <commit-hash>

# Show rank of most changed files on repository
git rank

# Show branches, with the most recent one on top
git lb

# See all commits' history changes on file (you may also pass more than one file)
git log <files-separated-by-spaces>

# See all commits' history changes on file - detailed with diff between changes
git log --follow -p --stat -- <file>

# See all commits' history changes on file - with fzf preview
git log --follow --date="format:%a %D %H:%M" --format="%h %ad %an" <file>  | fzf --prompt="Select a commit hash: " --preview "git show --format='' {1}:<file> -- | bat --color=always -p"

# Show only merge commits:
git log --merges

# Show all commits changes as a graph for each file:
git log --stat --oneline

# See summarized changes by author:
git shortlog --pretty=format:"%ar%n  %h - %s %n" --no-merges

# totally custom git log (last commit)
git log -n 1 --pretty=format:"%cD by %an (%h)"

# totally custom git log (full history)
git log --pretty=format:"%cD by %an (%h)"

# cheatsheet on what variables can be used o a custom git log
xdg-open https://devhints.io/git-log-format

# See summarized changes by author on file (you may also pass more than one file)
git shortlog --pretty=format:"%ai%n  %h - %s %n" <files-separated-by-spaces> --no-merges

# See rank/top contributors, with respective e-mails
git shortlog -sn --no-merges --email

# Fetch all tags
git fetch --all --tags

# Checkout tag into branch
git checkout tags/<tag> -b <branch-name>

# See merged branches
git branch --merged | egrep -v "(^\*|master|staging)"

# Delete merged branches
git branch --merged | egrep -v "(^\*|master|main|staging)" | xargs git branch -d

# get file contents from other branch
git show <branch>:<file-path> | vim - -c 'set syntax=<file-type>'

# get file contents from previous commit (e.g. file-type=python)
git show <commit-hash>:<file-path> | vim - -c 'set syntax=<file-type>'

# list local and remote branches
git branch -a

# list only remote branches
git branch -r

# Delete local branch
git branch -D <name>

# Delete remote branch
git push origin <name> -d

# Rename branch locally
git branch -m <current-name> <new-name>

# Rename remote branch
git push origin :<current-name> <new-name>

# Stash save
git stash save "<message>"

# Stash list
git stash list

# Stash pop
git stash pop <stash-item-hash>

# Interactively add parts (hunks) of changes
git add -p

# Use a commit from one branch on another
git cherry-pick <commit-from-anywhere-on-your-repo>

# Apply global gitignore file
git config --global core.excludesfile ~/.gitignore.global

# Revert file/directory to previous commit
git checkout <commit-hash> -- <file-or-directory>

# Update multiple repositories
export REPOS='<repositories-separated-with-space>' && export UPDATE_BRANCH=<branch-name> && /storage/src/devops/bin/update_repos.sh

# Select commit hash (pipe it manually to clipboard with `| cb` if you need)
git log --date=iso --pretty=format:'%Cgreen(%ad) %Cred%h%Creset -%C(yellow)%d%Creset %s %C(bold blue)<%an>%Creset' | fzf | awk '{print $4}'

# add note to commit
git notes add "<note-text>"

# read commit notes (git log command shows notes by default)
git notes show

# push notes (git doesn’t push/pull notes by default)
git push <remote> refs/notes/*

# fetch notes (git doesn’t push/pull notes by default)
git fetch origin refs/notes/*:refs/notes/*

# export tar/zip file from a branch, tag or commit
git archive --output=<tar-or-zip-file-name> <branch-tag-commit-or-HEAD>

# bissect (to search for problems - start on the last working commit and run the command below)
git bisect start

# bisect - mark commit as bad
git bisect bad

# bisect - mark commit as good
git bisect good

# squash commits (go to your branch first)
git rebase <base-branch> --interactive

# undo last x commits (it will undo the commit, but PRESERVE CHANGES done to your files)
git reset --soft HEAD~<number-of-commits>

# remove all changes from last x commits (it will delete the commits and DELETE CHANGES done to your files)
git reset --hard HEAD~<number-of-commits> && git push -f origin <your-branch-name>

# git-auto-sync: manual sync (save an pull, using rebase when pulling)
git-auto-sync sync

# change permissions to allow sharing current repo between 2 local users:
sudo chmod 664 .git/FETCH_HEAD

# see visual animation on the history of a repository
gource <path-to-git-repository>

# get forks of a github repository (you can also add "/forks" on a repo url on the browser)
curl https://api.github.com/repos/<repo-author-or-organization>/<repo-name>/forks

# search commits for specific message, by author:
git shortlog --pretty=format:"%ai%n  %h - %s %n" -n --grep="<string-or-regex>" --no-merges

# search for a string on all commit messages
git log --all --grep="<string-or-regex>" --pretty=format:'%C(auto)%ad %C(bold blue)%an%C(reset) %C(auto)%h %C(auto)%s' --date=iso --decorate

# Show files changed on each commit
git files-changed

# show which files changed on specific commit - e.g. 15a6cbf6fb
git show --stat <commit-hash>

# show the diff between a specific commit hash and the one prior to it
git difftool -t difft <commit-hash>^..<commit-hash>

# show diff files (I can use this to get the files that changed between a specific commit hash and the one prior to it , since the diff creates temporary file names based on the originals)
git diff --name-only <commit-hash>^..<commit-hash>

# open current diff with difftool (difftastic)
git difftool --tool=difft

# resolve merge conflicts with mergetool (meld)
git mergetool --tool=meld

# diff 2 different branches using difftool (difftastic) - I can also change the tool to meld if needed
git difftool --tool=difft <branch_01>..<branch_02>

# Show files changed between 2 branches
GIT_DIFF_TOOL=vimdiff git difftool --name-only <branch_01>..<branch_02>

# open nvim with files changed between 2 branches
nvim -p $(GIT_DIFF_TOOL=vimdiff git difftool --name-only <branch_01>..<branch_02>)

# Show files changed on current branch, comparing to another one
GIT_DIFF_TOOL=vimdiff git difftool --name-only <reference-branch>

# gh - cli - login
gh auth login --web

# gh - cli - checkout PR
gh pr checkout <pr_number>

# gh - cli - create patch file with the PR changes (you must be on the branch that has your feature/fix/etc...)
git diff <base-branch> --unified=5 > pr_changes.patch  # 5 is the number of context lines around the changes, change here if needed

# gh - cli - apply a patch file (if you need to do that for reviewing)
git apply <patch-file>
