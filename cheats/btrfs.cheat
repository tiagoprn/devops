% btrfs

# mount the logical volume of the root partition (5 is the top level btrfs partition root)
sudo mount -o subvolid=5,defaults,compress=zstd:1,discard=async /dev/mapper/data-root <mount-directory>

# mount subvolume into mountpoint  - to get the subvolid, run "btrfs subvolume list"
sudo mount -o subvolid=<subvolid>,defaults,compress=zstd:1,discard=async /dev/mapper/<mapping-name> <mount-directory>

# list btrfs subvolumes
sudo btrfs subvolume list <mounted-directory>

# create a subvolume inside a btrfs partition (if using timeshift, it expects subvolumes path to start with an "@")
sudo btrfs subvolume create <subvolume-path-on-filesystem>

# move files/directories to subvolume - the subvolume is "kinda like" a folder, but it is not ;)
sudo mv <files-or-directory-path> <subvolume-path-on-filesystem>

# Show disk usage
sudo btrfs filesystem df <mountpoint>

# Show filesystem information
sudo btrfs filesystem show

# print btrfs version of file
sudo httm <file-path>

# open contents of file's btrfs snapshot on neovim
nvim $(sudo httm <file-path> | grep '^[A-Z]' | fzf | awk '{print $8}' | sed 's/"//g')

# restore version of file from btrfs snapshot
sudo httm -r <file-path>

# print btrfs version of directory
sudo httm <directory-path>

# check status of btrfs subvolume  - /, /home, etc...
sudo btrfs device stats <subvolume-path>

# balance the filesystem DATA (free space  and also spreads data between disks) - if it returns "Done, had to relocate 0 out of XX chunks", increase the number
sudo btrfs balance start -dusage=<number-increase-from-5-in-5-until-100> <subvolume-path>

# balance the filesystem METADATA (free space  and also spreads data between disks) - if it returns "Done, had to relocate 0 out of XX chunks", increase the number
sudo btrfs balance start -musage=<number-increase-from-5-in-5-until-100> <subvolume-path>

# check balance status of current btrfs balance
sudo btrfs balance status <subvolume-path>

# check usage - use to tune the number on btrfs balance command
sudo btrfs filesystem usage <subvolume-path>

# defragment filesystem
sudo btrfs filesystem defragment -r <subvolume-path>

# scrub filesystem to remove errors/bitrot - check status with scrub status command
sudo btrfs scrub start <subvolume-path>

# check status of current btrfs scrub
sudo btrfs scrub status <subvolume-path>

# add new disk to btrfs subvolume - run the balance command after
sudo btrfs device add -f <non-partitioned-device> <subvolume-path>

# delete disk from btrfs subvolume - run the balance command after
sudo btrfs device delete -f <non-partitioned-device> <subvolume-path>

# deduplicate files on the current path - run for real - E.g. /var/lib/docker/btrfs/subvolumes
fd -t f | xargs duperemove -A -d -h -r -v -b4k --dedupe-options=noblock,same --lookup-extents=yes --io-threads=1

# deduplicate files on the current path - simulate  - E.g. /var/lib/docker/btrfs/subvolumes
fd -t f | xargs duperemove -A -h -r -v -b4k --dedupe-options=noblock,same --lookup-extents=yes --io-threads=1
