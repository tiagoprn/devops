% network, ip

# Get all routes (gateways, networks and interfaces)
route

# Get all network interfaces with their configuration
ip r

# Get all network interfaces (colorized version)
ip -c a

# Get all network interface names
ip r | grep -oP '(dev \w+\-*\w*)' | awk '{print $NF}' | sort | uniq

# Select network interface
ip r | grep -oP '(dev \w+\-*\w*)' | awk '{print $NF}' | sort | uniq | fzf --no-sort | xclip -i -selection clipboard

# Get IP on network interface
ip r | grep "$(ip r | grep -oP '(dev \w+\-*\w*)' | awk '{print $NF}' | sort | uniq | fzf)" | grep -oP 'src (?:\d{1,3}\.){3}\d{1,3}' | awk '{print $NF}'

# Get IP on current active network interface
ip r | grep metric | grep src | awk '{print $9,"(",$3,")"}'

# Get IPs on all network interfaces, and their statuses (up/down)
ip -br a

# List local open ports
netstat -netlp

# List remote open ports
sudo nmap -sS <host-ip>

# Traceroute a DNS request (for a webserver, tcp-port can be 80 for http or 443 for https)
tcptraceroute <tcp-domain> <tcp-port>

# Get your current public network interface
ip -o -4 route show to default | awk '{print $5}'

# Listen to connections coming from specific source
tcpdump -i <network-interface> -n -vvv -s 0 'src <source-ip> and tcp port 80 and (((ip[2:2] - ((ip[0]&amp;0xf)&lt;&lt;2)) - ((tcp[12]&amp;0xf0)&gt;&gt;2)) != 0)' -w <output-file>

# Listen to connections to specific destination
tcpdump -i <network-interface> -n -vvv -s 0 'dest <destination-ip> and tcp port 80 and (((ip[2:2] - ((ip[0]&amp;0xf)&lt;&lt;2)) - ((tcp[12]&amp;0xf0)&gt;&gt;2)) != 0)' -w <output-file>

# GET Pretty print json output
curl <url-returning-json> -s --write-out '%{json}' | python3 -m json.tool | pygmentize -l json

# POST Pretty print json output
curl -i -H "Content-Type: application/json;charset=utf-8" -X POST -d '<json_data>' <endpoint> -s --write-out '%{json}' | python3 -m json.tool | pygmentize -l json

# Get process that has a port open
lsof -i :<port>

# Get files opened by a process (includes port information)
lsof -p <pid>

# Get hostname's IP adress
nslookup <hostname>

# Get IP address' hostname
nslookup <ip>

# restart ubuntu DNS service
sudo systemctl stop systemd-resolved && sudo systemctl start systemd-resolved && sudo systemctl status systemd-resolved

# used to check if a port is open on a machine, so that you can connect to it (cleaner alternative to telnet)
nc -w 4 -vz <host> <port>

