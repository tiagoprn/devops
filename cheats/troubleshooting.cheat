% statistics, troubleshooting, monitoring

# single program ps usage statistics (RSS=real physical memory, VSZ=real+virtual memory)
watch -n 1 ps -p $(ps aux | fzf | awk '{print $2}') -o pid,time,command,%cpu,%mem,stat,rss,vsz

# single program ps usage statistics (simpler)
watch -n 1 ps -p $(ps aux | fzf | awk '{print $2}') -o %cpu,%mem,rss,command

# strace on a process
sudo strace -p $(ps aux | fzf | awk '{print $2}')

# friendly strace on a process
sudo strace -fe trace=creat,open,openat,unlink,unlinkat -p $(ps aux | fzf | awk '{print $2}')

# detailed time command to give execution statistics (like memory: "resident set size")
/usr/bin/time -v "<command>"

# show information regarding all partitions on all disks
lsblk -f -o name,mountpoint,size,label,uuid | grep -v loop

# Show cpu info
lscpu

# show number of cores/processors
nproc --all

# hardware information summary
sudo lshw -short

# hardware information - as json
sudo lshw -json

# hardware information - as html
sudo lshw -html

# hard disks list (ROTA means rotational device / spinning hard disks (1 if true, 0 if false))
lsblk -io KNAME,TYPE,MODEL,VENDOR,SIZE,ROTA

# list all PCI devices
lspci

# list all USB devices
lsusb

# show the number of processors/cpus/cores available
nproc

# system information - list requisites
inxi --recommends

# system information summary
inxi -F -A -I -u

# intermediate system formation
sudo inxi -Fxxxza

# detailed system information
sudo inxi -b -A -C -f -D -n -G -l -M -r -P -I -S -d -f -i -m -o -s -u

# top x processes by cpu
inxi -t c<number>

# top x processes by memory
inxi -t m<number>

# list all disk devices (without partitioning information)
lsblk -d -io KNAME,TYPE,MODEL,VENDOR,SIZE,ROTA

# sysstat - cpu usage, update each x seconds (all processors), "-o JSON" to output JSON on stdout
mpstat <seconds>

# sysstat - cpu usage, update each x seconds (all processors and per processor), "-o JSON" to output JSON on stdout
mpstat -P ALL <seconds>

# sysstat - SYSTEM OVERVIEW - processes, memory, swap, I/O and cpu
vmstat -a -t --wide

# sysstat - SYSTEM OVERVIEW - processes, memory, swap, I/O and cpu - update each x seconds
vmstat -a -t --wide <seconds>

# sysstat - cpu and device/partitions since boot, "-o JSON" to output JSON on stdout
iostat -t --human --pretty

# sysstat - cpu  with x seconds interval, "-o JSON" to output JSON on stdout
iostat -t -c --human --pretty <seconds>

# sysstat - device/partitions with x seconds interval, "-o JSON" to output JSON on stdout
iostat -t -d --human --pretty <seconds>

# sysstat - per partition on disk, "-o JSON" to output JSON on stdout
iostat -t -d --human --pretty -p $(lsblk -d -io KNAME,TYPE,MODEL,VENDOR,SIZE,ROTA | fzf | awk '{print $1}') <seconds>

# sysstat - per disk, "-o JSON" to output JSON on stdout
iostat -t -d --human --pretty -x $(lsblk -d -io KNAME,TYPE,MODEL,VENDOR,SIZE,ROTA | fzf | awk '{print $1}') <seconds>

# sysstat - install iostat, vmstat, mpstat, pidstat and sar
sudo apt install -y sysstat

# sysstat - device/partition usage - iostat - detailed columns description
man iostat

# sysstat - cpu usage - mpstat - detailed columns description
man mpstat

# sysstat - memory usage - vmstat - detailed columns description
man vmstat

# sysstat - process/pid usage - pidstat - detailed columns description
man pidstat

# sysstat - sar (system activity report)
man sar

# sysstat - show process usage of cpu resources with x seconds interval. "expression" can be a regex or string. E.g. "fox|bird"
pidstat --human -C "<expression>" -p ALL <seconds>

# sysstat - show process usage of memory with x seconds interval. "expression" can be a regex or string. E.g. "fox|bird"
pidstat --human -C "<expression>" -r -p ALL <seconds>

# sysstat - show pid process usage of resources with x seconds interval.
pidstat --human -p <pid> <seconds>

# sysstat - show pid process usage of memory resources with x seconds interval.
pidstat --human -r -p <pid> <seconds>

# sysstat - sar - CPU - historic metrics
sar -h -u -f $(find /var/log/sysstat/ -maxdepth 1 -type f -print0 | while IFS= read -r -d $'\0' file; do echo "$file" ; done | fzf)

# sysstat - sar - MEMORY - historic metrics
sar -h -r -f $(find /var/log/sysstat/ -maxdepth 1 -type f -print0 | while IFS= read -r -d $'\0' file; do echo "$file" ; done | fzf)

# sysstat - sar - SWAP - historic metrics
sar -h -S -f $(find /var/log/sysstat/ -maxdepth 1 -type f -print0 | while IFS= read -r -d $'\0' file; do echo "$file" ; done | fzf)

# sysstat - sar - I/O (useful on slowdowns) - historic metrics
sar -h -b -f $(find /var/log/sysstat/ -maxdepth 1 -type f -print0 | while IFS= read -r -d $'\0' file; do echo "$file" ; done | fzf)

# sysstat - sar - CPU - real-time metrics
sar -h -u <seconds>

# sysstat - sar - MEMORY - real-time metrics
sar -h -r <seconds>

# sysstat - sar - SWAP - real-time metrics
sar -h -S <seconds>

# sysstat - sar - I/O (useful on slowdowns) - real-time metrics
sar -h -b <seconds>

# sysstat - sar - CPU frequency (MHz) - real-time metrics
sar -h -m CPU,FREQ <seconds>

# sysstat - sar - CPU - today metrics
sar -h -u

# sysstat - sar - MEMORY - today metrics
sar -h -r

# sysstat - sar - SWAP - today metrics
sar -h -S

# sysstat - sar - I/O (useful on slowdowns) - today metrics
sar -h -b

# sysstat - my post on it on writeloop
xdg-open https://writeloop.dev/posts/sysstat/

