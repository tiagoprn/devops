% kvm, libvirt, qemu, qcow2, virsh

# validate if the host has all it takes for virtualization
sudo virt-host-validate

# create and enable a storage pool
mkdir -p <path>  && sudo virsh pool-define-as <pool-name> dir - - - - <path> && sudo virsh pool-build <pool-name> && sudo virsh pool-start <pool-name> && sudo virsh pool-autostart <pool-name> && sudo virsh pool-list --all

# kvm environment information
sudo virsh version --daemon

# show available storage pools
sudo virsh pool-list --all

# stop a storage pool, release its' resources, remove its' directory and definition:
sudo virsh pool-destroy <pool-name> && sudo virsh pool-delete <pool-name> && sudo virsh pool-undefine <pool-name>

# get running vms
sudo virsh list --all

# get running vms (watch)
watch -n 1 sudo virsh list --all

# remove vm
sudo virsh undefine $(sudo virsh list --all | fzf | awk '{print $2}') --snapshots-metadata
@ (first you have to stop it)

# list all networks and their statuses
sudo virsh net-list --all

# stop a network
sudo virsh net-destroy $(sudo virsh net-list --all | fzf | awk '{print $1}')

# start a network
sudo virsh net-start $(sudo virsh net-list --all | fzf | awk '{print $1}')

# get all IPs on a network (used by VMs)
sudo virsh net-dhcp-leases $(sudo virsh net-list --all | fzf | awk '{print $1}')

# show vm info
sudo virsh dominfo $(sudo virsh list --all | fzf | awk '{print $2}')

# start a vm
sudo virsh start $(sudo virsh list --all | fzf | awk '{print $2}')

# stop a vm
sudo virsh shutdown $(sudo virsh list --all | fzf | awk '{print $2}')

# kill a vm
sudo virsh destroy $(sudo virsh list --all | fzf | awk '{print $2}')
@ (first it must be stopped)

# pause a vm
sudo virsh suspend $(sudo virsh list --all | fzf | awk '{print $2}')

# resume a paused vm
sudo virsh resume $(sudo virsh list --all | fzf | awk '{print $2}')

# enable vm on boot
sudo virsh autostart $(sudo virsh list --all | fzf | awk '{print $2}')

# disable vm from boot
sudo virsh autostart $(sudo virsh list --all | fzf | awk '{print $2}') --disable

# show vm network configuration (mac address etc.)
sudo virsh domiflist $(sudo virsh list --all | fzf | awk '{print $2}')

# info on qcow2/img disk
qemu-img info <disk-file>

# info on qcow2/img disk (fdisk)
fdisk -l <disk-file>

# resize disk. e.g.: sudo virsh blockresize /storage/kvm/storage_pools/ubuntu18/ubuntu18-qcow2 15g
sudo virsh blockresize <domain-name> <disk-file> <size>

# create qcow2 disk (size e.g. 10g)
qemu-img create -f qcow2 <qcow2-disk-file> -o size=<size>,preallocation=metadata

# convert image from qcow2 to img
qemu-img convert <qcow2-image> <img-image>

# convert image from img to qcow2
qemu-img convert -f raw -O qcow2 <img-image> <qcow2-image>

# configure port forwarding:
sudo vim /etc/libvirt/hooks/qemu

# desktop app
virt-manager &

# desktop app - simple viewer
sudo virt-viewer $(sudo virsh list --all | fzf | awk '{print $2}')

# ssh into VM
/storage/src/devops/shellscripts/kvm/ssh.sh

# live backup VM
/storage/src/devops/shellscripts/kvm/live-backup.sh -n $(sudo virsh list --all | fzf | awk '{print $2}') -s '<friendly-suffix>'

# restore VM backup
export VM_NAME=$(sudo virsh list --all | fzf --prompt 'choose a VM: ' | awk '{print $2}') && \
	/storage/src/devops/shellscripts/kvm/restore-backup.py \
	-x $(find /kvm/backups/$VM_NAME -name config.xml | fzf --prompt 'choose a VM config file: ') \
	-b $(find /kvm/backups/$VM_NAME -name *.qcow2 | fzf --prompt 'choose a qcow2 disk: ') \
	-n $VM_NAME \
	-i "/kvm/$VM_NAME/disk/$VM_NAME.qcow2";

# inspect disks attached to a VM
sudo virsh -c qemu:///system domblklist $(sudo virsh list --all | fzf | awk '{print $2}')
